//C++ Code For Implementation Of Linked List

//
//  main.c
//  LinkedListC
//
//  Created by Jaydev Jangiti on 25/04/2020.
//  Copyright Â© 2020 Jaydev Jangiti. All rights reserved.
//

//*************************************************************************
//**********************SINGLY LINKED LIST*********************************
//*************************************************************************

/*
 #include <stdio.h>
 #include <stdlib.h>
 struct node{
    int data;
    struct node *next;
};
struct node *head,*temp,*newnode,*tempp;
int count=0;
void create_new_node(int d)
{
    newnode=(struct node*)malloc(sizeof(struct node));
   // printf("Enter The Data Of The Node : \n");
   // scanf("%d",&newnode->data);
    newnode->data=d;
    newnode->next=0;
    if(head==0)
    {
        head=newnode;
        temp=newnode;
    }
    else
    {
        temp->next=newnode;
        temp=newnode;
    }
}
void print_list()
{
    tempp=head;
    while(tempp!=0)
    {
    printf("%d",tempp->data);
    printf("->");
    tempp=tempp->next;
    count++;
    }

}

void add_node_pos(int pos)
{
    int i=0;
    if(pos>count)
        printf("Invalid Position");
    else
    {
        newnode=(struct node*)malloc(sizeof(struct node));
               printf("\n");
               printf("Enter data for Last node \n");
               scanf("%d",&newnode->data);
               temp=head;
               while(i<pos)
               {
                   temp=temp->next;
                   i++;
               }
               newnode->next=temp->next;
               temp->next=newnode;
    }
    




}
void delete_node_at_start()
{
    struct node *temp1;
    temp1=head;
    head=head->next;
    free(temp1);
}
void delete_node_at_end()
{
    struct node *prev_node,*temp2;
    temp2=head;
    prev_node=0;
    while(temp2->next!=0)
    {
        prev_node=temp2;
        temp2=temp2->next;
    }
    if(temp2==head)
    {
        head=0;
        free(temp2);
    }
    else
    {
        prev_node->next=0;
        free(temp2);
    }
}

void delete_pos(int pos)
{
    struct node *next_node;
    int i=1;
    while(i<(pos-1))
    {
        temp=temp->next;
        i++;
    }
    next_node=temp->next;
    temp->next=next_node->next;
    free(next_node);
}
void insert_node_at_end(int d)
{
    newnode=(struct node*)malloc(sizeof(struct node));
    printf("\n");
    //printf("Enter data for Last node \n");
    newnode->data=d;
    newnode->next=0;
    temp=head;
    while((temp->next)!=0)
    {
        temp =temp->next;
    }
    temp->next=newnode;
}
void insert_node_at_start(int d)
{
    newnode=(struct node*)malloc(sizeof(struct node));
       printf("\n");
       //printf("Enter data for first node \n");
       newnode->data=d;
       newnode->next=head;
       head=newnode;
       temp=head;
}
void reverse_list()
{
    struct node *prevnode,*nextnode,*currentnode;
    prevnode=0;
    currentnode=nextnode=head;
    while (nextnode!=0)
    {
        nextnode=nextnode->next;
        currentnode->next=prevnode;
        prevnode=currentnode;
        currentnode=nextnode;
    }
}
int main()
{
    create_new_node(54);
    create_new_node(34);
    create_new_node(89);
    create_new_node(69);
    create_new_node(69);
    print_list();
    printf("\n");
    //delete_node_at_start();
    //delete_node_at_end();
    insert_node_at_end(69);
    insert_node_at_end(420);
    printf("\n");
    print_list();
    printf("\n");
    insert_node_at_start(420);
    print_list();
    printf("\n");
    reverse_list();
}
 */
//*************************************************************************
//**********************DOUBLE LINKED LIST*********************************
//*************************************************************************
/*
#include<stdio.h>
#include<stdlib.h>

struct node
{
    int data;
    struct node *next;
    struct node *prev;
};
struct node *head,*temp,*newnode,*tail;
int size=0;
void print_list()
{
    temp=head;
    printf("\n");
    while(temp!=0)
    {
        printf("%d",temp->data);
        printf("->");
        size++;
        temp=temp->next;
    }
    printf("\n");
}
void creat_node(int d)
{
    newnode=(struct node*)malloc(sizeof(struct node));
    newnode->data=d;
    newnode->next=0;
    newnode->prev=0;
    if(head==0)
    {
        head=temp=tail=newnode;
    }
    else
    {
        tail->next=newnode;
        newnode->prev=tail;
        tail=newnode;
    }
}
void insert_begining(int d)
{
    newnode=(struct node*)malloc(sizeof(struct node));
    newnode->data=d;
    newnode->prev=0;
    newnode->next=0;
    head->prev=newnode;
    newnode->next=head;
    head=newnode;
}

void insert_End(int d)
{
    newnode=(struct node*)malloc(sizeof(struct node));
    newnode->data=d;
    newnode->next=0;
    newnode->prev=0;
    tail->next=newnode;
    newnode->prev=tail;
    tail=newnode;
}

void insert_at_pos(int pos,int d)
{
    int k=d,i=1;
    temp=head;
    if(pos>size)
    {
        printf("Invalid Position");
    }
    else if(pos==1)
    {
        insert_begining(k);
    }
    else
    {
    newnode=(struct node*)malloc(sizeof(struct node));
    newnode->data=d;
    while(i<(pos-1))
    {
        temp=temp->next;
        i++;
    }
        newnode->prev=temp;
        newnode->next=temp->next;
        temp->next=newnode;
        newnode->next->prev=newnode;
}
}

void insert_after_pos(int pos,int d)
{
    int k=d,i=1;
    temp=head;
    if(pos>size)
    {
        printf("Invalid Position");
    }
    else if(pos==1)
    {
        insert_begining(k);
    }
    else
    {
    newnode=(struct node*)malloc(sizeof(struct node));
    newnode->data=d;
    while(i<(pos))
    {
        temp=temp->next;
        i++;
    }
        newnode->prev=temp;
        newnode->next=temp->next;
        temp->next=newnode;
        newnode->next->prev=newnode;
        
    }
}
void delete_begin()
{
    if(head==0)
        printf("LIST IS EMPTY");
    else{
    temp=head;
    head=head->next;
    head->prev=0;
    free(temp);
    }
}

void delete_end()
{
    temp=tail;
    tail=tail->prev;
    tail->next=0;
    free(temp);
    
}

void delete_atPos(int pos)
{
    int i;
    temp=head;
    while(i<(pos))
    {
        temp=temp->next;
        i++;
    }
    temp->prev->next=temp->next;
    temp->next->prev=temp->prev;
    free(temp);
    
    
    
    
}
int main()
{
    creat_node(69);
    creat_node(55);
    creat_node(67);
    print_list();
    insert_begining(420);
    print_list();
    insert_End(469);
    print_list();
    insert_after_pos(3, 999);
    print_list();
    delete_begin();
    print_list();
    delete_end();
    print_list();
}
 */
//*************************************************************************
//**********************CIRCULAR LINKED LIST*******************************
//*************************************************************************
/*
#include<stdio.h>
#include<stdlib.h>

struct node{
    int data;
    struct node *next;
};
struct node *head,*newnode,*temp,*tail;

void create_node(int d)
{
    newnode=(struct node*)malloc(sizeof(struct node));
    newnode->data=d;
    newnode->next=0;
    if(head==0)
    {
        head=temp=newnode;
    }
    else
    {
        temp->next=newnode;
        temp=newnode;
    }
    temp->next=head;
    tail=newnode;
}

void printlist()
{
     if(head==0)
         printf("List Is Empty");
    else
    {
        while(temp->next!=head)
        {
            printf("%d",temp->data);
            printf("->");
            temp=temp->next;
        }
        printf("%d",temp->data);
    }
}

void insert_begin(int d)
{
    newnode=(struct node*)malloc(sizeof(struct node));
    newnode->data=d;
    newnode->next=0;
    if(tail==0)
    {
    tail=newnode;
    tail->next=newnode;
    }
    else
    {
        newnode->next=tail->next;
        tail->next=newnode;
}
}
void insert_end(int d)
{
    newnode=(struct node*)malloc(sizeof(struct node));
    newnode->data=d;
    newnode->next=0;
    if(tail==0)
    {
    tail=newnode;
    tail->next=newnode;
    }
    else
    {
     newnode->next=tail->next;
        tail->next=newnode;
        tail=newnode;
    }
}
int main()
{
    create_node(56);
    create_node(99);
    create_node(65);
    create_node(1009);
    printlist();
    
    
}

*/
